import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View, TouchableOpacity, Text, Image, Dimensions } from 'react-native';
import { CameraView, useCameraPermissions } from 'expo-camera';
import { useRef, useState } from 'react';
import * as ImageManipulator from 'expo-image-manipulator';

type CropCorner = {
  x: number;
  y: number;
};

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

export default function App() {
  const [permission, requestPermission] = useCameraPermissions();
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  const [editedPhoto, setEditedPhoto] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [rotation, setRotation] = useState(0);
  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });
  const [cropCorners, setCropCorners] = useState<CropCorner[]>([
    { x: 0.1, y: 0.1 },
    { x: 0.9, y: 0.1 },
    { x: 0.9, y: 0.9 },
    { x: 0.1, y: 0.9 },
  ]);
  const cameraRef = useRef<CameraView>(null);

  if (!permission) {
    return <View style={styles.container} />;
  }

  if (!permission.granted) {
    return (
      <View style={styles.container}>
        <Text style={styles.permissionText}>Camera permission required</Text>
        <TouchableOpacity style={styles.permissionButton} onPress={requestPermission}>
          <Text style={styles.buttonText}>Grant Permission</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const handleCapture = async () => {
    console.log('Capture button pressed');
    if (cameraRef.current) {
      try {
        const photo = await cameraRef.current.takePictureAsync();
        console.log('Photo captured:', photo?.uri);
        if (photo) {
          setCapturedPhoto(photo.uri);
          setIsEditing(true);
          console.log('State updated - isEditing:', true);
          Image.getSize(photo.uri, (width, height) => {
            console.log('Image size:', width, height);
            setImageSize({ width, height });
          });
        }
      } catch (error) {
        console.error('Error capturing photo:', error);
      }
    } else {
      console.log('Camera ref not available');
    }
  };

  const handleRotate = () => {
    setRotation((prev) => (prev + 90) % 360);
  };

  const handleRetake = () => {
    setCapturedPhoto(null);
    setEditedPhoto(null);
    setIsEditing(false);
    setRotation(0);
    setCropCorners([
      { x: 0.1, y: 0.1 },
      { x: 0.9, y: 0.1 },
      { x: 0.9, y: 0.9 },
      { x: 0.1, y: 0.9 },
    ]);
  };

  const handleSave = async () => {
    if (!capturedPhoto) return;

    try {
      const actions: ImageManipulator.Action[] = [];

      // Add rotation
      if (rotation !== 0) {
        actions.push({ rotate: rotation });
      }

      // Add crop
      const cropX = Math.min(...cropCorners.map(c => c.x));
      const cropY = Math.min(...cropCorners.map(c => c.y));
      const cropWidth = Math.max(...cropCorners.map(c => c.x)) - cropX;
      const cropHeight = Math.max(...cropCorners.map(c => c.y)) - cropY;

      actions.push({
        crop: {
          originX: cropX * imageSize.width,
          originY: cropY * imageSize.height,
          width: cropWidth * imageSize.width,
          height: cropHeight * imageSize.height,
        },
      });

      const result = await ImageManipulator.manipulateAsync(
        capturedPhoto,
        actions,
        { compress: 0.9, format: ImageManipulator.SaveFormat.JPEG }
      );

      setEditedPhoto(result.uri);
      setIsEditing(false);
    } catch (error) {
      console.error('Error editing image:', error);
    }
  };

  const handleCornerDrag = (index: number, x: number, y: number) => {
    const newCorners = [...cropCorners];
    newCorners[index] = {
      x: Math.max(0, Math.min(1, x)),
      y: Math.max(0, Math.min(1, y)),
    };
    setCropCorners(newCorners);
  };

  // Show editing screen
  console.log('Render - isEditing:', isEditing, 'capturedPhoto:', capturedPhoto);

  if (isEditing && capturedPhoto) {
    console.log('Rendering editing screen');
    return (
      <View style={styles.container}>
        <View style={styles.editContainer}>
          <Image
            source={{ uri: capturedPhoto }}
            style={[styles.editImage, { transform: [{ rotate: `${rotation}deg` }] }]}
            resizeMode="contain"
            onLoad={(e) => {
              const { width, height } = e.nativeEvent.source;
              setImageSize({ width, height });
            }}
          />

          {/* Crop overlay */}
          <View style={styles.cropOverlay}>
            {cropCorners.map((corner, index) => (
              <View
                key={index}
                style={[
                  styles.cropCorner,
                  {
                    left: corner.x * SCREEN_WIDTH - 15,
                    top: corner.y * (SCREEN_HEIGHT - 200) - 15,
                  },
                ]}
                onStartShouldSetResponder={() => true}
                onResponderMove={(e) => {
                  handleCornerDrag(
                    index,
                    e.nativeEvent.pageX / SCREEN_WIDTH,
                    e.nativeEvent.pageY / (SCREEN_HEIGHT - 200)
                  );
                }}
              />
            ))}
          </View>
        </View>

        <View style={styles.editControls}>
          <TouchableOpacity style={styles.editButton} onPress={handleRetake}>
            <Text style={styles.editButtonText}>Retake</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.rotateButton} onPress={handleRotate}>
            <Text style={styles.rotateButtonText}>‚ü≤</Text>
          </TouchableOpacity>

          <TouchableOpacity style={[styles.editButton, styles.saveButton]} onPress={handleSave}>
            <Text style={styles.editButtonText}>Save</Text>
          </TouchableOpacity>
        </View>

        <StatusBar style="light" />
      </View>
    );
  }

  // Show final saved image
  if (editedPhoto) {
    return (
      <View style={styles.container}>
        <Image source={{ uri: editedPhoto }} style={styles.savedImage} resizeMode="contain" />
        <View style={styles.controls}>
          <TouchableOpacity style={styles.retakeButtonFinal} onPress={handleRetake}>
            <Text style={styles.buttonText}>Take Another</Text>
          </TouchableOpacity>
        </View>
        <StatusBar style="light" />
      </View>
    );
  }

  // Show camera view
  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} ref={cameraRef} facing="back" />

      <View style={styles.controls}>
        <TouchableOpacity style={styles.captureButton} onPress={handleCapture}>
          <View style={styles.captureButtonInner} />
        </TouchableOpacity>
      </View>

      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    justifyContent: 'center',
  },
  camera: {
    flex: 1,
  },
  controls: {
    position: 'absolute',
    bottom: 40,
    left: 0,
    right: 0,
    alignItems: 'center',
  },
  captureButton: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
  },
  captureButtonInner: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: 'white',
    borderWidth: 3,
    borderColor: '#000',
  },
  permissionText: {
    color: 'white',
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
  },
  permissionButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  editContainer: {
    flex: 1,
    position: 'relative',
  },
  editImage: {
    width: '100%',
    height: '100%',
  },
  cropOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 200,
  },
  cropCorner: {
    position: 'absolute',
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    borderWidth: 3,
    borderColor: '#007AFF',
  },
  editControls: {
    position: 'absolute',
    bottom: 40,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  editButton: {
    backgroundColor: '#333',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    minWidth: 100,
    alignItems: 'center',
  },
  saveButton: {
    backgroundColor: '#007AFF',
  },
  editButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  rotateButton: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#333',
    justifyContent: 'center',
    alignItems: 'center',
  },
  rotateButtonText: {
    color: 'white',
    fontSize: 32,
  },
  savedImage: {
    width: '100%',
    height: '100%',
  },
  retakeButtonFinal: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
});
